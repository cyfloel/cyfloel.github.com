<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[夜星寒]]></title>
  <subtitle><![CDATA[一步一脚印]]></subtitle>
  <link href="http://cyfloel.github.io//atom.xml" rel="self"/>
  <link href="http://cyfloel.github.io/"/>
  <updated>2013-12-25T02:15:17.666Z</updated>
  <id>http://cyfloel.github.io//</id>
  <author>
    <name><![CDATA[Cyfloel]]></name>
    <email><![CDATA[yangzhibin228@sina.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Visual Studio 2010 + OpenCV2.4.7开发环境搭建]]></title>
    <link href="http://cyfloel.github.io/2013/12/24/opencv_vs2010/"/>
    <id>http://cyfloel.github.io/2013/12/24/opencv_vs2010/</id>
    <published>2013-12-24T12:12:30.000Z</published>
    <updated>2013-12-25T02:12:40.000Z</updated>
    <content type="html"><![CDATA[<p>最近在弄一个车牌识别的简单程序，决定使用C++和OpenCV来实现。从网上找资料，自己学习已经有一段时间了，但是还停留在车牌定位的实现上，效果不是很理想，不过总算学了一段时间，还是得总结一下，免得自己碰到的一些问题或者想法会遗忘，毕竟也是自己的经验。唠叨了不少，开始进入正题，今天先记录下如何搭建开发环境。<a id="more"></a></p>
<p><strong>第一步 下载Visual Studio和OpenCV</strong></p>
<p>Visual Studio的下载就不多说了。OpenCV简单来说就是一个图像视觉库，里面封装了各种功能的函数，方便使用者来对图像进行处理。OpenCV的可以从它的<a href="http://opencv.org/" target="_blank">官网</a>上下载得到，目前最新的版本是OpenCV2.4.7，本文使用的也是这个版本。</p>
<p>OpenCV的安装很简单，现在都已经打包好，不需要以前那样还需要使用到CMake。本文安装在D盘Program Files下的OpenCV文件夹中，即D:\Program Files\OpenCV；</p>
<p><strong>第二步 配置系统环境变量</strong></p>
<p>右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;高级[选项卡]-&gt;环境变量；然后在系统变量里面，选着Path变量，选择编辑，把路径D:\Program Files\OpenCV\opencv\build\x64\vc10\bin添加进去（PS：64位系统的话为x64，32位系统为x86，另外opencv前面的路径依据各自安装路径而定）。<br><img src="http://cyfloel.u.qiniudn.com/image/1.jpg" alt=""></p>
<p>把具体的路径添加到变量值里面：<br><img src="http://cyfloel.u.qiniudn.com/image/2.jpg" alt=""></p>
<p><strong>第三步 配置Visual Studio 2010</strong></p>
<p>前面已经把环境变量配置完毕，接下来为了使Visual Studio能够找到OpenCV的函数库，需要对VS配置一下，配置VS的方法也很简单，首先打开VS，新建一个Win32控制台的空项目。<br><img src="http://cyfloel.u.qiniudn.com/image/3.jpg" alt=""></p>
<p>点击确认，在弹出的窗口选择下一步，在附加选项，把空项目勾选。<br><img src="http://cyfloel.u.qiniudn.com/image/4.jpg" alt=""><br>这样就新建了一个空白的控制台项目。接着在菜单栏选择项目-&gt;属性，在属性页配置属性中，配置VC++目录和链接器两个选项。<br><img src="http://cyfloel.u.qiniudn.com/image/5.jpg" alt=""><br>选择VC++目录-&gt;包含目录，编辑包含目录，把</p>
<pre><code>D:<span class="command">\Program</span> Files<span class="command">\OpenCV</span><span class="command">\opencv</span><span class="command">\build</span><span class="command">\include</span>
D:<span class="command">\Program</span> Files<span class="command">\OpenCV</span><span class="command">\opencv</span><span class="command">\build</span><span class="command">\include</span><span class="command">\opencv</span>
D:<span class="command">\Program</span> Files<span class="command">\OpenCV</span><span class="command">\opencv</span><span class="command">\build</span><span class="command">\include</span><span class="command">\opencv</span>2</code></pre>
<p>添加到包含目录里面，如下图：<br><img src="http://cyfloel.u.qiniudn.com/image/6.jpg" alt=""><br>接着编辑库目录，把</p>
<pre><code>D:<span class="command">\Program</span> Files<span class="command">\OpenCV</span><span class="command">\opencv</span><span class="command">\build</span><span class="command">\x</span>64<span class="command">\vc</span>10<span class="command">\lib</span></code></pre>
<p>添加到库目录里面，如下图：<br><img src="http://cyfloel.u.qiniudn.com/image/7.jpg" alt=""><br>最后是配置链接器，选择链接器-&gt;输入-&gt;附加依赖项，把下面的内容添加到附加依赖项里面</p>
<pre><code><span class="title">opencv_calib3d247d</span>.lib
<span class="title">opencv_contrib247d</span>.lib
<span class="title">opencv_core247d</span>.lib
<span class="title">opencv_features2d247d</span>.lib
<span class="title">opencv_flann247d</span>.lib
<span class="title">opencv_gpu247d</span>.lib
<span class="title">opencv_highgui247d</span>.lib
<span class="title">opencv_imgproc247d</span>.lib
<span class="title">opencv_legacy247d</span>.lib
<span class="title">opencv_ml247d</span>.lib
<span class="title">opencv_nonfree247d</span>.lib
<span class="title">opencv_objdetect247d</span>.lib
<span class="title">opencv_photo247d</span>.lib
<span class="title">opencv_stitching247d</span>.lib
<span class="title">opencv_ts247d</span>.lib
<span class="title">opencv_video247d</span>.lib
<span class="title">opencv_videostab247d</span>.lib
<span class="title">opencv_calib3d247</span>.lib
<span class="title">opencv_contrib247</span>.lib
<span class="title">opencv_core247</span>.lib
<span class="title">opencv_features2d247</span>.lib
<span class="title">opencv_flann247</span>.lib
<span class="title">opencv_gpu247</span>.lib
<span class="title">opencv_highgui247</span>.lib
<span class="title">opencv_imgproc247</span>.lib
<span class="title">opencv_legacy247</span>.lib
<span class="title">opencv_ml247</span>.lib
<span class="title">opencv_nonfree247</span>.lib
<span class="title">opencv_objdetect247</span>.lib
<span class="title">opencv_photo247</span>.lib
<span class="title">opencv_stitching247</span>.lib
<span class="title">opencv_ts247</span>.lib
<span class="title">opencv_video247</span>.lib
<span class="title">opencv_videostab247</span>.lib</code></pre>
<p>上面的内容其实就是OpenCV所在目录里面lib目录的内容，如：</p>
<pre><code>D:<span class="command">\Program</span> Files<span class="command">\OpenCV</span><span class="command">\opencv</span><span class="command">\build</span><span class="command">\x</span>64<span class="command">\vc</span>10<span class="command">\lib</span></code></pre>
<p><img src="http://cyfloel.u.qiniudn.com/image/8.jpg" alt=""></p>
<p>到此，OpenCV的配置就已经完成了，下面可以试试使用OpenCV来调用图像，测试是否可以使用。（注：lib目录里面后面的数字如247，其实就OpenCV的版本，比如本文的是OpenCV2.4.7，所以数字就是247，如果是旧的版本或者更新版本，只需要把相应数字改成对应的版本号就可以，也可以直接查看lib目录得到；路径的具体位置要根据自己的安装路径而定）</p>
<p>下面测试一下配置是否成功，在新建的项目里，选择源文件，添加新建项，选择C++文件，采用下面的代码来进行测试：</p>
<pre><code><span class="preprocessor">#include "opencv2/opencv.hpp"</span>
<span class="preprocessor">#include "opencv2/highgui/highgui.hpp"</span>
<span class="keyword">using</span> <span class="class"><span class="keyword">namespace</span> <span class="title">cv</span>;

<span class="title">int</span> <span class="title">main</span>(){</span>
    <span class="keyword">const</span> <span class="keyword">char</span>* wndname = <span class="string">"Test Demo"</span>;  <span class="comment">//窗口的名称;</span>
    <span class="keyword">char</span>* names[] = {<span class="string">"goodnight.jpg"</span>, <span class="number">0</span>};  <span class="comment">//文件名称，文件放在源文件所在目录;</span>
    Mat img = imread(names[<span class="number">0</span>], <span class="number">1</span>);  <span class="comment">//读取彩色图像; </span>
    namedWindow(wndname, <span class="number">1</span>);  <span class="comment">//创建图像窗口;</span>
    imshow(wndname, img);
    waitKey(<span class="number">0</span>);  <span class="comment">//控制图像显示时间，参数为空或0是，表示一直停留;</span>
    <span class="keyword">return</span> <span class="number">0</span>;
}</code></pre>
<p>如果配置成功，运行结果如下图:<br><img src="http://cyfloel.u.qiniudn.com/image/9.jpg" alt=""><br>注：如果编译成功，运行出现下面的错误</p>
<blockquote>
<p>LINK : fatal error LNK1123: 转换到 COFF 期间失败: 文件无效或损坏</p>
</blockquote>
<p>解决方法是：<br>项目-&gt;属性-&gt;配置属性-&gt;清单工具-&gt;输入和输出-&gt;嵌入清单；原来是“是”，将其改为“否”即可。</p>
<p>另外，按照本文进行配置，有一个问题就是每新建一个项目后，都需要重新配置一遍，暂时还没找到问题所在，但也许只是我个人会出现这种问题，本文仅供参考。</p>
<p>后面会继续慢慢整理OpenCV的学习体会，待续。。。</p>
]]></content>
    <category scheme="http://cyfloel.github.io/tags/OpenCV/" term="OpenCV"/>
    <category scheme="http://cyfloel.github.io/tags/Visual Studio/" term="Visual Studio"/>
    <category scheme="http://cyfloel.github.io/tags/C++/" term="C++"/>
    <category scheme="http://cyfloel.github.io/categories/OpenCV/" term="OpenCV"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[C++学习——No.1]]></title>
    <link href="http://cyfloel.github.io/2013/12/11/c++_review1/"/>
    <id>http://cyfloel.github.io/2013/12/11/c++_review1/</id>
    <published>2013-12-11T00:43:40.000Z</published>
    <updated>2013-12-11T13:11:31.000Z</updated>
    <content type="html"><![CDATA[<p>本科毕业后就再也没用过C++，可是现在发现，基本每个程序员的要求，都是从C++开始，于是，重新开始C++的学习之路，最近几天看了一下以前的课本，这里把一些觉得有用的东西记录一下，尤其是几个排序的算法，前面的关于变量的基础性东西就不在这里多叙述了。<a id="more"></a></p>
<p>第一个记录是switch的使用，其实主要是对那道计费题目的方法比较感兴趣：</p>
<p>路程（s）越远，运费越低，标准为：</p>
<pre><code>s <span class="tag">&lt; <span class="attribute">250</span>, <span class="attribute">d</span>=<span class="value">0</span>
<span class="attribute">s</span> &gt;</span>= 250 &amp; s <span class="tag">&lt; <span class="attribute">500</span>, <span class="attribute">d</span>=<span class="value">0.02</span> 
<span class="attribute">s</span> &gt;</span>= 500 &amp; s <span class="tag">&lt; <span class="attribute">1000</span>, <span class="attribute">d</span>=<span class="value">0.05</span>
<span class="attribute">s</span> &gt;</span>= 1000 &amp; s <span class="tag">&lt; <span class="attribute">2000</span>, <span class="attribute">d</span>=<span class="value">0.08</span>
<span class="attribute">s</span> &gt;</span>= 2000 &amp; s <span class="tag">&lt; <span class="attribute">3000</span>, <span class="attribute">d</span>=<span class="value">0.10</span>
<span class="attribute">s</span> &gt;</span>= 3000, d=0.15
f = p * w * s * (1-d)</code></pre>
<p>可以用C++的if语句来完成，同样也可以用switch语句，if语句的话很简单，就不多说了，来看看switch是怎么实现的：</p>
<pre><code><span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
<span class="keyword">int</span> main(){
    <span class="keyword">int</span> c;
    <span class="keyword">float</span> d, p, w, s, f;
    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入p，w，s，以空格键间隔。"</span>;
    <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; w &gt;&gt; s;
    <span class="keyword">if</span> (s &gt;= <span class="number">3000</span>)
        c = <span class="number">12</span>;
    <span class="keyword">else</span>
        c = <span class="keyword">int</span>(s) / <span class="number">250</span>;
    <span class="keyword">switch</span> (c){
    <span class="keyword">case</span> <span class="number">0</span>: d = <span class="number">0</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">1</span>: d = <span class="number">2</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">2</span>:
    <span class="keyword">case</span> <span class="number">3</span>: d = <span class="number">5</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">4</span>:
    <span class="keyword">case</span> <span class="number">5</span>:
    <span class="keyword">case</span> <span class="number">6</span>:
    <span class="keyword">case</span> <span class="number">7</span>: d = <span class="number">8</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">8</span>: 
    <span class="keyword">case</span> <span class="number">9</span>:
    <span class="keyword">case</span> <span class="number">10</span>:
    <span class="keyword">case</span> <span class="number">11</span>: d = <span class="number">10</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">12</span>: d = <span class="number">15</span>; <span class="keyword">break</span>;
    }
    f = p * w * s * (<span class="number">1</span> - d / <span class="number">100.0</span>);
    <span class="built_in">cout</span> &lt;&lt; <span class="string">"freight="</span> &lt;&lt; f &lt;&lt; endl;
    <span class="keyword">return</span> <span class="number">0</span>;
}</code></pre>
<p>待续。。。</p>
]]></content>
    <category scheme="http://cyfloel.github.io/tags/C++/" term="C++"/>
    <category scheme="http://cyfloel.github.io/tags/Review/" term="Review"/>
    <category scheme="http://cyfloel.github.io/tags/Program/" term="Program"/>
    <category scheme="http://cyfloel.github.io/categories/C++/" term="C++"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[第一个Blog]]></title>
    <link href="http://cyfloel.github.io/2013/12/08/the-first-blog/"/>
    <id>http://cyfloel.github.io/2013/12/08/the-first-blog/</id>
    <published>2013-12-08T12:43:03.000Z</published>
    <updated>2013-12-08T14:08:23.000Z</updated>
    <content type="html"><![CDATA[<p>一直以来都想自己弄一个技术博客，但每一次都是半途而废，这一次下定决心，要一步一步走下来，既然想走技术发展的路线，要是连一个简单的Blog都弄不起来，那还是直接放弃好了。</p>
<p>于是，这一次决心在<a href="www.github.com">Github</a>上搭建自己的博客。在开始的时候，是想使用<a href="http://jekyllrb.com/" target="_blank">jekyll</a>来建的，后来看到<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>，发现它好和jekyll相比，更快也更轻量，因此最后决定采用它来做来博客的框架。<a id="more"></a>从周六开始，一直网上找hexo搭建的教程，折腾了两天，暂时是可以满足现在的需求了。目前是采用<a href="https://github.com/reee/hexo-theme-flat" target="_blank">flat</a>主题，觉得这个主题够简单，修改起来也不复杂，在此感谢flat主题的作者<a href="http://hong.im/" target="_blank">Zhong Hong</a>。</p>
<p>使用Ubuntu的时候，曾经用过Latex来编写文档，觉得真不错，可以不用考虑排版这些东西。写Blog同样，只想专注于自己写什么，所以尝试使用Markdown来写写。第一篇博文，主要是想试试Markdown的语法，了解一下怎么使用。</p>
<p>这几天除了一直折腾Blog的东西，也在思考以后自己的路要怎么走，发现现在的心态跟Github的创始人Tom说过的一句话一样：</p>
<blockquote>
<p><em>当我老去，回顾一生，我想说，“哇，那是一场冒险”；而不是，“哇，我真的很安稳”</em></p>
</blockquote>
<p>在这里，我要非常感谢我的一个好友<a href="http://user.qzone.qq.com/275166533?ADUIN=380013479&amp;ADSESSION=1386495238&amp;ADTAG=CLIENT.QQ.5275_FriendTip.0&amp;ADPUBNO=26274&amp;ptlang=2052" target="_blank">Ben</a>，当一个人迷茫的时候，就会忘记自己当初的梦想。也许将来我也不会成功，但至少我做出了改变。路都是人走出来的。借用Ben的签名：</p>
<blockquote>
<p><em>回首，已走。珍惜可以拥有的一切，时间，朋友，亲情，爱人</em></p>
</blockquote>
]]></content>
    <category scheme="http://cyfloel.github.io/tags/随想/" term="随想"/>
    <category scheme="http://cyfloel.github.io/tags/生活/" term="生活"/>
    <category scheme="http://cyfloel.github.io/tags/学习/" term="学习"/>
    <category scheme="http://cyfloel.github.io/categories/随想/" term="随想"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://cyfloel.github.io/2013/12/07/hello-world/"/>
    <id>http://cyfloel.github.io/2013/12/07/hello-world/</id>
    <published>2013-12-07T09:25:45.000Z</published>
    <updated>2013-12-07T09:25:45.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
  </entry>
</feed>
